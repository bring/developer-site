#%RAML 0.8
---
title: Booking API
baseUri: https://api.bring.com/booking/api

securitySchemes:
- mybring_headers:
    description: |
      The API supports using Mybring headers for authenticating requests.
    type: x-headers
    describedBy:
      headers:
        X-MyBring-API-Uid:
          displayName: Mybring user id
          required: true
          example: mybring-user@example.com
        X-MyBring-API-Key:
          displayName: Mybring API key
          required: true
          example: f00f000f-00f0-f0f0-f0f0-f0f0f0f0ff0
        X-Bring-Client-URL:
          displayName: client url
          required: true
          example: https://example.com/shop
      responses:
        400:
          description: Authentication failed.

documentation:
- title: Introduction
  content: |
      The Bring Booking API is a logged-in service that lets Mybring users (customers of Mybring) programatically create a booking by invoking a Web Service over SOAP or by posting XML/JSON over HTTP. The API uses the same backend as [Mybring Booking](https://www.mybring.com/booking/) and the same PDF labels.

      We support two types of integration with the Booking API. XML/JSON over HTTP and SOAP (over HTTP).

      Bring Booking uses Bring Fraktguide as the source for price and availability for the different products. We advise clients of the Booking API to use Fraktguiden for getting the list price and checking availability before sending a booking request. Note that invoice payment is the only available payment option for the Booking API. This means that the Mybring user ID used in the booking request must have access to the customer number specified as payer of the booking.

- title: Versioning strategy
  content: |
      Each request has a `schemaVersion` element indicating which release of the schema is being used in the request and expected schema format in the response. Important: All clients must accept new (unknown) elements in the response. E.g. unknown elements should be ignored. The client framework used by client must thus not crash when unknown elements are encountered. Note that this requirement excludes the (old, but still widely used) Apache Axis 1.x Web Service client framework.

/customers{mediaTypeExtension}:
  displayName: /customers.json or /customers.xml
  securedBy: [mybring_headers]
  description: |
      The customer numbers are prefixed with the specialist, followed by the number. For Courier and Bring Express-products, we use a UUID to identify users.

      The customer API will return for each specialist a list with the products that you can order through the booking API.

      You can also get the API customer numbers from [this page in Mybring](https://www.mybring.com/useradmin/account/apicustomernumber).

      | Specialist | Example products | Example customer number |
      |:-----------|:-----------------|:------------------------|
      | Bring Parcels, Norway | `BPAKKE_DOR-DOR`, `PA_DOREN`, `EKSPRESS09` | `PARCELS_NORWAY-10001123123` |
      | Bring Cargo, Norway | `CARGO_GROUPAGE` | `CARGO_NORWAY-10001123123` |
      | Bring Express, Norway | `COURIER_4H`, `QUICKPACK_SAMEDAY`, `QUICKPACK_DAY_CERTAIN` | `EXPRESS_NORWAY-2caedf20-27da-012f-3858-58b0357c4f66` |
      | Bring Express, Sweden | `COURIER_4H`, `QUICKPACK_SAMEDAY`, `QUICKPACK_DAY_CERTAIN` | `EXPRESS_SWEDEN-406077f0-27da-012f-3859-58b0357c4f66` |
      | Oil Express, Norway | `OIL_EXPRESS` | `SYSPED_NORWAY-12345` |

  uriParameters:
    mediaTypeExtension:
      enum: [ .json, .xml ]
      description: Use .json to specify application/json or .xml to specify application/xml
  get:
    description: List available customers and products
    responses:
      200:
        body:
          application/json:
            example: !include examples/customers.json
          application/xml:
            example: !include examples/customers.xml

/booking:
  displayName: /booking
  description: |
      ### Content-Type Negotiation


  securedBy: [mybring_headers]
  post:
    description: Make a booking
    body:
      application/json:
        schema: !include schemas/booking_post.json
        example: !include examples/basicRequest.json
      application/xml:
        schema: !include schemas/booking-v1.xsd
        example: !include examples/basicRequest.xml
    responses:
      200:
        description: A label
        body:
          application/json:
            example: !include examples/successfulResponse.json
          application/xml:
            example: !include examples/successfulResponse.xml
    


/ws:
  displayName: /ws
  description: Make a booking, get a label
  securedBy: [mybring_headers]
  post:
    description: Make a booking (SOAP)
    body: 
      application/soap+xml:
        schema: schemas/booking-v1.xsd
        example: !include examples/soap_response_booking.xml
    responses:
      200:
        body:
          application/soap+xml:
            example: !include examples/soap_response_booking.xml



