#%RAML 1.0
---
title: Event Cast API
version: v1
baseUri: https://api.bring.com/event-cast
mediaType: application/json
annotationTypes:
  hideInDocumentation: boolean
  hideRequired: boolean
types:
  WebhookRequest:
    type: object
    properties:
      trackingId:
        type: string
        required: true
      event_groups:
        type: string
        required: true
      configuration:
        type: Configuration
        required: true
  WebhookBatchRequest:
      type: object
      properties:
        trackingIds:
          type: string[]
          required: true
        event_groups:
          type: string
          required: true
        configuration:
          type: Configuration
          required: true
  Webhook:
    type: object
    properties:
      id:
        type: string
        required: false
        description: Represents an unique identifiaction. This value can be maximum 36 characters long
      authenticator:
        type: string
        required: false
        description: Represents your authentication identification. This value can be maximum 40 characters long
      trackingId:
        type: string
        required: true
      event_groups:
        type: string
        required: true
        description: Represents the group(s) that is part of this Webhook
      expiry:
        type: datetime
        required: false
        description: TimeZone is set to UTC. Use this format to parse the instant; `yyyy-MM-dd'T'HH:mm:ssZ`
      created:
        type: datetime
        required: false
        description: TimeZone is set to UTC. Use this format to parse the instant; `yyyy-MM-dd'T'HH:mm:ssZ`
      configuration:
        type: Configuration
        required: true
  Configuration:
    type: object
    properties:
      url:
        type: string
        required: true
        description: This value can be maximum 250 characters long
      content_type:
        type: string
        required: false
        description: This value can be maximum 40 characters long
      headers:
        type: ConfigurationHeader[]
        required: false
        description: The combined length of all the keys and values of header can be maximum 1024 characters long(including the separators)
  ConfigurationHeader:
    type: object
    properties:
      key:
        type: string
        required: true
      value:
        type: string
        required: true
        description: This value will not be available in any response
  ErrorResponse:
    type: object
    properties:
      uuid:
        type: string
        description: This represents an unique identifier for the failing request. Can be used whilst contacting Bring
      status:
        type: string
        description: Represents a 3/4 digit code that can be used to identify the problem
      reason:
        type: string
        required: false
        description: Can contain some hints on what went wrong during the request

documentation:
- title: Introduction
  content: |

    The Tracking API provides the opportunity to track shipments by reference, package or shipment number. If you are interested in when a shipment is picket up by the recipient
    or some other event has happened, then it's better to be told when something happens instead of polling the current status.

    The Event Cast API makes you subscribe to such events using Webhooks.

    > A Webhook in web development is a method of augmenting or altering the behaviour of a web page, or web application, with custom callbacks.
    > These callbacks may be maintained, modified, and managed by third-party users and developers who may not necessarily be affiliated with the originating website or application.

    ### Webhooks in Bring
    In the context of Bring, this means that whenever an event is registered in Bring for a subscribed parcel and/or shipment,
    we'll send a HTTP POST to your callback URL that were defined during the Webhook registration.

    Using Webhooks is quite simple, and allows for immediate feedback based on the event that occurred for the subscribed entity.
    Additionally, it allows integrations of customers to become simpler, as no scheduled mechanism is required to be implemented.
    You basically just define an endpoint that accepts HTTP POST, and the event details will be sent there - quite amazing ðŸ™Œ

- title: Authentication
  content: |
    To make API requests, you will need an API key from Mybring. Steps for getting a key and description of headers can be found on the general API [Getting Started / Authentication](/api/#authentication) page.

- title: API limitations
  content: |
    There is some known/deliberate limitations for the API:

    | Resource | Limitation description |
    |:--------|:---------|
    | All requests | The Webhook API allows a maximum of _50 concurrent requests_ per user |
    | Batch creation | Whilst creating requests for Webhooks is a feature we encurage to use, its maximum amount of parcels and/or shipments is limited to _100 per request_. If you have more than 100 at the time, split to multiple requests using the batch-API |
    | Webhook testing | The `/api/v1/Webhooks/{WebhookId}/test`-api allows a maximum of _10 concurrent requests_ per user |

- title: Events
  content: |
    When registering for a Webhook you can choose between a range of different event groups that you can subscribe for.
    It is recommended to limit the amount of events to subscribe for. Bring will send an event on each of the events occurred which in result may send quite a few HTTP-requests to your server.
    So, as a good practise, keep the list of event groups as small as possible.

    Each of the event groups corresponds to a certain set of actions that can happen to the package/shipment you subscribe for. For instance, if you subscribe to `DELIVERED`, all internal Bring-events
    will trigger a request to your defined callback URL.

    ### Event groups

    Default set of subscribeable event groups. Notice that this list is subject for change.

    | Event | Description |
    |:-------|:--------|
    | `ARRIVED_DELIVERY` | Arrived Delivery point - This is when a container arrives at recipients address, and can start unloading. |
    | `ARRIVED_COLLECTION` | Arrived for collection at pickup point |
    | `ATTEMPTED_DELIVERY` | The package has been attempted delivered at the door. Depending on the service it will be tried again or sent to closest pickup point. |
    | `CUSTOMS` | Package is in customs clearance. |
    | `COLLECTED` | The parcel has been collected at pickup address. |
    | `DELIVERED` | Package has been delivered. |
    | `DELIVERED_SENDER` | Package has been returned to the sender |
    | `DELIVERY_CANCELLED` | Home delivery has been cancelled by the customer. |
    | `DELIVERY_CHANGED` | Date for Home delivery has been changed by customer. |
    | `DELIVERY_ORDERED` | Home delivery has been ordered |
    | `DEVIATION` | Deviation in production. Something wrong has happened and there is a probability for delay. |
    | `HANDED_IN` | Package has been handed in to Bring. |
    | `INTERNATIONAL` | Package has been sent from origin country or arrived at destination country. |
    | `IN_TRANSIT` | Package is in transit. |
    | `NOTIFICATION_SENT` | Notification for this package has been sent by sms, push and/or mail. This can be informational notifications and action notification like pickup notice. |
    | `PRE_NOTIFIED` | EDI message for the package has been received by Bring. |
    | `READY_FOR_PICKUP` | Package has arrived at pickup point. |
    | `RETURN` | The package has been returned to sender. |
    | `TRANSPORT_TO_RECIPIENT` | Package has been loaded for delivery to the recipient. |
    | `TERMINAL` | The package is now registered/arrived at inbound/outbound storage terminal |

    There is also a specific set of events that will be sent if something deviates from the normal event flow:

    | Event | Description |
    |:-------|:--------|
    | `NOT_REGISTERED` | Webhook not registered. This might be due to the parcel-/shipment-number not being found with Bring' systems and can trigger after up to two - 2 - days |
    | `EXPIRED` | Webhook expired |

    #### Subscribing to multiple event groups

    The Webhook API supports the possibility to subscribe to multiple event groups at the same time.
    Doing so requires that groups are separated with comma and is defined as an array.
    Example:

    ```
    ['IN_TRANSIT', 'NOTIFICATION_SENT', 'TERMINAL', .., ..]
    ```

    Need more examples? See the "Create Webhook" section below.

- title: Receiving Callbacks
  content: |
    In order to receive requests from Bring, your callback URL must be accessible on the internet and able to receive requests from Bring IPs.
    Additionally, to minimize risk, you should also provide HTTPS-enabled endpoints and use some kind of authentication mechanism.
    For HTTPS, please do not use self-signed certificates, as requests may fail from Bring' side and you'll receive no requests.

    If you need a simple authentication whilst receiving requests from Bring, we recommend utilizing the header functionality provided by the Webhook configuration.

    All received callbacks from Bring will be using UTC as its current timezone and is based on the following format (Java):

    ```
    "yyyy-MM-dd'T'HH:mm:ssZ"
    ```

- title: Payload
  content: |

    ### Payload delivery headers

    `HTTP POST` payloads that are delivered to your Webhook's configured URL endpoint contains several Bring specific headers:

    | Header | Description |
    |:-------|:--------|
    | `X-Bring-Application` | Identifies the application that sent the request to your endpoint |
    | `X-bring-Correlation` | Correlation Id can be used whilst contacting Bring on error cases |
    | `X-bring-Version` | Indicates the version of application |
    | `<your headers>` | Any headers that were specified in the Webhook configuration will also be appended |

    ### Example

    Requests issued from Bring to your endpoint will look similar to this:

    ```json
      POST /callback/Webhook HTTP/1.1
      host: localhost:80
      Accept: application/json
      User-Agent: Bringcast-Webhook/v1.0.34-SNAPSHOT
      X-Bring-Application: BMEC
      X-bring-Correlation: xA3n7
      X-some-fancy-custom-header: with-some-value-that-I-expect
      Content-Type: application/json
      Content-Length: 188

      {
        "status": "IN_TRANSIT",
        "id": "ad84cbca-2e89-43e0-a301-a8d5d7fe7804",
        "shipment": "SHIPMENTNUMBER",
        "package": "TESTPACKAGEDELIVERED",
        "created": "2019-03-16T14:58:48+0000",
        "pushed": "2019-03-16T14:58:49+0000"
      }
    ```
- title: Q & A
  content: |

    **Can I have multiple Webhooks for the same parcel?**<br>
    You can register for multiple Webhooks on the same parcel/shipment, as long as the event groups are different for each registration.

    **How many active Webhooks can I have simultaneously?**<br>
    Currently there is no limitation.

    **Is the expiration duration configurable?**<br>
    No.

    **Can I get a history of events that were sent for a subscription?**<br>
    Not in this version. It may be available in the future. Please note that you may use the [Tracking API](/api/tracking) if you'd like the entire list of events that has happened for a lifecycle related to a shipment.

    **Will I be able to see my previous/expired Webhooks (active and inactive)?**<br>
    No.

    **What happens if our endpoint is down and a callback is being sent?**<br>
    We'll try issuing a request to your defined endpoint up to three - 3 - times with a delay on 30 minutes for the two first, then wait an hour for the last retry.
    After this, callbacks will not be retried.

    **Do you support wildcard events/event groups (e.g `*` or `ALL`)?**<br>
    No.

    **Do you support modifying existing active webhooks?**<br>
    No.

    **My shipment is not yet registered with Bring, will registering for Webhook work related to that tracking number?**<br>
    Yes.

    When you subscribe for a parcel that does not yet exist in Bring' systems, a retry mechanism will try for up to two - 2 - days to ensure that the Webhook will be registered when the parcel is found internally.
    Eventually, if the package was not found with Bring within this timeframe - a notification will be sent on the callback URL configured for that Webhook which notifies this.

    **Note**: Retry-timing is non-configurable.

/api/v1/webhooks:
  displayName: Create Webhook
  description: |
    Create a new subscription for a Webhook.
    Webhooks lives for up to 30 days, or until the entity subscribed for is marked as "delivered by Bring".
  post:
    description: Register a new Webhook subscription for a parcel or shipment
    body:
      application/json:
        type: WebhookRequest
        examples:
          valid_request:
            displayName: Valid Request
            value: !include examples/create-webhook-request.json
    responses:
      201:
        description: Returns the registered Webhook after creation request.
        body:
          application/json:
            type: Webhook
            examples:
              reqister_Webhook:
                displayName: Registered Webhook
                value: !include examples/webhook-request.json
      400:
        displayName: Bad request
        description: Unable to register Webhook due to some bad request from the client side.
        body:
          application/json:
            type: ErrorResponse
            examples:
              invalid_Webhook:
                displayName: Invalid creation request
                value: !include examples/create-webhook-invalid.json
      401:
        displayName: Error
        description: Missing authentication headers
      409:
        displayName: Conflict
        description: Webhook of similar subscription already exists
      429:
        displayName: Too many requests
        description: This may happen due to client sending too many requests. Try again a bit later, or decrease amount of requests
      500:
        displayName: Internal Bring error
        description: If this happens, try again a bit later as it might be due to some internal mechanism not working
/batch/api/v1/webhooks:
  displayName: Create multiple Webhooks
  description: |
        Create a range of new Webhooks based on a list of any parcel or shipment.
        Webhooks lives for up to 30 days, or until the entity subscribed for is marked as "delivered by Bring".
  post:
    description: Register a new Webhook subscription for an array parcels and/or shipments
    body:
      application/json:
        type: WebhookBatchRequest
        examples:
          valid_request:
            displayName: Valid Request
            value: !include examples/batch-create-webhook-request.json
    responses:
      201:
        description: |
          Returns the registered Webhook after creation request.
        body:
          application/json:
            type: Webhook
            examples:
              reqister_Webhook:
                displayName: Registered Webhook
                value: !include examples/batch-webhook-request.json
      400:
        displayName: Bad request
        description: |
          Unable to register Webhook due to some bad request from the client side.
        body:
          application/json:
            type: ErrorResponse
            examples:
              invalid_Webhook:
                displayName: Invalid creation request
                value: !include examples/create-webhook-invalid.json
      401:
        displayName: Error
        description: Missing authentication headers
      429:
        displayName: Too many requests
        description: This may happen due to client sending too many requests. Try again a bit later, or decrease amount of requests
      500:
        displayName: Internal Bring error
        description: If this happens, try again a bit later as it might be due to some internal mechanism not working
/api/v1/webhooks/{Webhookid}:
  displayName: Delete Webhook
  uriParameters:
    Webhookid:
      displayName: WebhookId
      type: string
      description: This represents the specific identifier of the Webhook
  delete:
    description: Remove an existing subscribed Webhook
    queryParameters:
      includeWebhook:
        description: If set to true, the deleted Webhook will be returned
        type: boolean
        required: false
        example: true
    responses:
      200:
        body:
          application/json:
            type: Webhook
            examples:
              get_Webhook:
                displayName: Registered Webhook
                value: !include examples/webhook-request.json
      204:
        displayName: Webhook successfully removed
        description: Webhook unregistered and removed. No content supplied in response
      401:
        displayName: Error
        description: Missing authentication headers
      404:
        displayName: Error
        description: Webhook not found (not registered?)
/api/v1/webhooks/:
  displayName: Get all Webhooks
  get:
    description: Get all your current registered and active Webhooks. Pagination is currently not supported
    queryParameters:
      limit:
        description: This represents the limit which can be used to limit the number of latest webhooks returned. Max limit for this is 150 000.
        type: string
        required: false
        default: 10000
        example: 100
    responses:
      200:
        body:
          application/json:
            type: Webhook
            examples:
              get_Webhook:
                displayName: Registered Webhook
                value: !include examples/webhook-request-all.json
      400:
        displayName: Bad request
        description: Unable to register Webhook due to some bad request from the client side.
        body:
          application/json:
            type: ErrorResponse
            examples:
              invalid_request:
                displayName: Invalid creation request
                value: !include examples/create-webhook-invalid.json
      401:
        displayName: Error
        description: Missing authentication headers.
      404:
        displayName: Error
        description: Webhook not found (not registered?)
/api/v1/webhooks/{WebhookId}:
  displayName: Get single Webhook
  uriParameters:
    WebhookId:
      displayName: WebhookId
      type: string
      description: This represents the specific identifier of the Webhook
  get:
    description: Get the specification that belongs to a registered Webhook
    responses:
      200:
        body:
          application/json:
            type: Webhook
            examples:
              get_Webhook:
                displayName: Registered Webhook
                value: !include examples/webhook-request.json
      400:
        displayName: Bad request
        description: Unable to register Webhook due to some bad request from the client side.
        body:
          application/json:
            type: ErrorResponse
            examples:
              invalid_request:
                displayName: Invalid creation request
                value: !include examples/create-webhook-invalid.json
      401:
        displayName: Error
        description: Missing authentication headers
      404:
        displayName: Error
        description: Webhook not found (not registered?)
/api/v1/webhooks/{WebhookId}/test:
  displayName: Test a push Webhook
  description: |
    This will trigger a Webhook to receive a dummy request to the registered Webhook.

    **Note**: There is no retry mechanism in place for this, so if a request fails for some reason, it will go on un-noticed.
  uriParameters:
    WebhookId:
      displayName: WebhookId
      type: string
      description: This represents the specific identifier of the Webhook
  post:
    description: Test the Webhook service with the provided Webhook identifier
    responses:
      202:
        displayName: Accepted
        description: The request have been registered, and a dummy-request will be sent to the registered Webhook
      401:
        displayName: Error
        description: Missing authentication headers
      404:
        displayName: Error
        description: Webhook not found (not registered?)
