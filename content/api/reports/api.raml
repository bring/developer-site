#%RAML 1.0
---
title: Reports API
baseUri: https://www.mybring.com/reports/api
types:
  DashboardData:
    type: object
    properties:
      kolliNumber:
        type: string
        required: true
        description: Represents a package number
      shipmentNumber:
        type: string
        required: true
        description: Represents a shipment number
      recipientName:
        type: string
        required: true
        description: Represents a recipient name
      lastStatus:
        type: string
        required: true
        description: Represents the lastStatus
      lastEvent:
        type: string
        required: false
        description: Represents the lastEvent
      senderReference:
        type: string
        required: false
        description: Represents the senderReference
      recipientMobileNumber:
        type: string
        required: false
        description: Represents the recipient Mobile Number
      productCode:
        type: string
        required: false
        description: Represents the productCode
      productName:
        type: string
        required: true
        description: Represents the productName
      countryCode:
        type: string
        required: true
        enum: [ "DK", "FI","NO", "SE"]
        description: Represents the country code
      shipmentGroupType:
        type: string
        required: true
        enum: [ "REMAINING_FOR_DELIVERY", "LOADED_TO_CAR", "ATTEMPTED_DELIVERY", "AT_PICKUP_POINT", "SUCCESSFULLY_DELIVERED"]
        description: Represents the shipmentGroup by status

documentation:
- title: Introduction
  content: |
    The Reports API is used to generate shipment reports, the same set of reports that are available in mybring.

    Each Mybring user is associated with a set of customers and has access to specific set of report types for which they can generate a report.

    The following steps (which will be API calls) enables you to generate a report:

    1. Get the customers associated with the mybring user.
    2. Get the report types allowed for a customer.
    3. Initiate report creation and get report ID. The Report ID is initially used to monitor reports creation progress, later to get the actual report (XML or Excel file).
    4. After initiating report creation, you can check the status if the job. I.e. if it is in progress, completed or failed. When status is completed, a URL for fetching the actual report is returned.
    5. The report can then be downloaded.

    For all the above APIs we need to identify and authenticate the user. This is done by passing the following header information. These are described in Reference section:

    - Mybring username (email address)
    - API Key

    All these APIs are available in json and xml formats.

- title: Authentication
  content: |
    To make API requests, you will need an API key from Mybring. Steps for getting a key and description of headers can be found on the general API [Getting Started / Authentication](/api/#authentication) page.

- title: How to use
  content: |
    The Reports API is a logged-in service and you need to get an API-key and authenticate before being able to use the API.

    The two first steps in the process is only necessary to find customer numbers and report types for the user. You can save these IDs, and perform the generation-step without verifying the IDs. The response may get added information, so implementation should ignore new elements added to the response.

    1. Get customer IDs
    2. Get list of available reports
    3. Generate report
    4. Check status of report
    5. Download report
    6. Get list of invoice numbers for given customer or group

    ### Available invoice sources
    For specified invoice report 4 different types of report can be returned depending on the invoice source. Those are

    Cargo Domestic and Sea :
      - AMPHORA_DOMESTIC
      - AMPHORA_SEA

    Cargo International and Sysped :
      - AMPHORA_BCI
      - SYSPED

    Parcels :
      - PARCEL_DOMESTIC

/generate{mediaTypeExtension}:
  displayName: List available customers
  description: |
    List available customers for the provided API credentials.
  uriParameters:
    mediaTypeExtension:
      enum: [ .json, .xml ]
      description: Use .json to specify application/json or .xml to specify application/xml
  get:
    description: List available customers
    headers:
      Accept-Language:
        description: A comma-separated list of language codes, `no` for Norwegian, `en` for English, etc.
        type: string
        required: false
    responses:
      200:
        displayName: Successful response
        body:
          application/json:
            examples:
              successful:
                displayName: Successful
                description: The example below shows list of available customers
                value: !include examples/list_customers.json
          application/xml:
            examples:
              successful:
                displayName: Successful
                description: The example below shows list of available customers
                value: !include examples/list_customers.xml



/generate/{customerId}{mediaTypeExtension}:
  displayName: List available reports for a customer
  description: |
    Each customer has a set of reports available. This endpoint lists all available reports for a given customer.
  uriParameters:
    customerId:
      description: A customer ID from the 'list of available customers' call.
      type: string
      required: true
    mediaTypeExtension:
      enum: [ .json, .xml ]
      description: Use .json to specify application/json or .xml to specify application/xml
  get:
    description: List available reports for a customer
    headers:
      Accept-Language:
        description: A comma-separated list of language codes, `no` for Norwegian, `en` for English, etc.
        type: string
        required: false
    responses:
      200:
        displayName: Successful response
        body:
          application/json:
            examples:
              successful:
                displayName: Successful
                description: The example below shows list of available reports
                value: !include examples/list_reports.json
          application/xml:
            examples:
              successful:
                displayName: Successful
                description: The example below shows list of available reports
                value: !include examples/list_reports.xml

/generate/{customerId}/{reportTypeId}{mediaTypeExtension}:
  displayName: Generate a report
  description: |
    To generate a report do a GET to the supplied URL, and include the parameters described in the previous response. You need not invoke the two first steps for every report generation if customer id and report type are known.

    This is asynchronous request. So the GET-call will return 202, telling the caller the that the request for a report is put on the queue. The URL to query to get the status for the request if provided as an HTTP header and also in the response.

    The example below shows how to generate a PARCELS-DELIVERED report for PARCELS_NORWAY-00012341234 in the period 01.07.2014 to 01.08.2014.
  uriParameters:
    customerId:
      description: A customer ID from the 'list of available customers' call.
      type: string
      required: true
    reportTypeId:
      description: A report type ID from the 'list of available reports' call.
      type: string
      required: true
    mediaTypeExtension:
      enum: [ .json, .xml ]
      description: Use .json to specify application/json or .xml to specify application/xml
  get:
    description: Generate a report
    queryParameters:
      parameterName:
        description: The different report types have different params. The params are doucmented in the list of available reports, for example `fromDate` and `toDate`.
        type: string
        required: true
    headers:
      Accept-Language:
        description: A comma-separated list of language codes, `no` for Norwegian, `en` for English, etc.
        type: string
        required: false
    responses:
      202:
        displayName: Successful response
        headers:
          Location:
            description: URL to get status of the generated report
            required: true
            type: string
            example: https://www.mybring.com/reports/api/report/db285042-6e8d-4563-94ca-eb1100706a73/status/
        body:
          application/json:
            examples:
              successful:
                displayName: Successful
                description: The example below shows successful reports generation response with URL
                value: !include examples/generate_report.json
          application/xml:
            examples:
              successful:
                displayName: Successful
                description: The example below shows successful reports generation response with URL
                value: !include examples/generate_report.xml

/report/{reportId}/status{mediaTypeExtension}:
  displayName: Check the status of a report
  description: |
    Since the generation of reports may take several minutes, we supply a status address to check the status of the report generation. The status page will display `NOT_DONE`, until the report is ready to be downloaded. When the report is ready, URLs to download the report will be in the response
  uriParameters:
    reportId:
      description: A report ID from a 'generate a report' call.
      type: string
      required: true
    mediaTypeExtension:
      enum: [ .json, .xml ]
      description: Use .json to specify application/json or .xml to specify application/xml
  get:
    description: Check the status of a report
    headers:
      Accept-Language:
        description: A comma-separated list of language codes, `no` for Norwegian, `en` for English, etc.
        type: string
        required: false
    responses:
      200:
        displayName: Report status
        description: Examples show different statuses.
        body:
          application/json:
            examples:
              successful:
                displayName: Report status done
                description: The example below shows reports status done
                value: !include examples/status_done.json
              successful_notDone:
                displayName: Report status not done
                description: The example below shows reports generated status
                value: !include examples/status_not_done.json
              successful_failed:
                displayName: Report status failed
                description: The example below shows reports generation failed status
                value: !include examples/status_failed.json
          application/xml:
            examples:
              successful:
                displayName: Report status done
                description: The example below shows reports status not done
                value: !include examples/status_done.xml
              successful_notDone:
                displayName: Report status not done
                description: The example below shows reports generated status
                value: !include examples/status_not_done.xml
              successful_failed:
                displayName: Report status failed
                description: The example below shows reports generation failed status
                value: !include examples/status_failed.xml

/report/{reportId}{mediaTypeExtension}:
  displayName: Get report
  description: |
    Returns the generated report.
  uriParameters:
    reportId:
      description: A report ID from a 'generate a report' call.
      type: string
      required: true
    mediaTypeExtension:
      enum: [ .xls, .xml ]
      description: Use .xls to get Excel file or .xml to get XML file.
  get:
    description: Get report
    headers:
      Accept-Language:
        description: A comma-separated list of language codes, `no` for Norwegian, `en` for English, etc.
        type: string
        required: false
    responses:
      200:
        displayName: Report
        description: |
          Examples show the MetaData included in successful(200) response for specified invoice report vs other reports.
        body:
          application/xml:
            examples:
              successful_invoice:
                displayName: Successful with invoice details
                description: The example below shows empty report with invoice details under metadata section of Report response
                value: !include examples/empty_invoice_report.xml
              successful:
                displayName: Successful
                description: The example below shows empty report without invoice details
                value: !include examples/empty_report.xml

/invoices/{customerOrGroupId}{mediaTypeExtension}:
  displayName: List invoice numbers
  description: |
    ** DEPRECATED **
    This endpoint will be removed in a future version of the API.
    Use the Invoice API instead:
    [Invoice API / List of all Invoices](/api/invoice/#list-of-all-invoices)

    Gets the list of invoice numbers for a customer id or a customer group. By default it shows last 65 days of invoices, with the possibility to access 365 days data by providing from date and to date.

    This endpoint support Main Customer Number only.
  uriParameters:
    customerOrGroupId:
      description: Id for customer or customer group. Customer group id should have the prefix `GROUP_`.
      type: string
      required: true
    mediaTypeExtension:
      enum: [ .json, .xml ]
      description: Use .json to specify application/json or .xml to specify application/xml
  get:
    description: List invoice numbers
    headers:
      Accept-Language:
        description: A comma-separated list of language codes, `no` for Norwegian, `en` for English, etc.
        type: string
        required: false
    queryParameters:
            fromDate:
              description: Start date for fetching invoices in format dd.mm.yyyy.
              required: false
              example: 01.01.2019
            toDate:
              description: End date for fetching invoices in format dd.mm.yyyy.
              type: string
              required: false
              example: 30.06.2019
    responses:
      200:
        displayName: Successful response
        description:
        body:
          application/json:
            examples:
              successful:
                displayName: Successful
                description: The example below shows an list of invoices
                value: !include examples/list_invoices.json
          application/xml:
            examples:
              successful:
                displayName: Successful
                description: The example below shows an list of invoices
                value: !include examples/list_invoices.xml

/overview/{apiCustomerNumber}/summary{mediaTypeExtension}:
  displayName: Reports overview statistics summary
  description: |
    Gives total cost and volume of shipments from Parcel, Cargo and  Parcel International service customers with reports with financial access.
  uriParameters:
    apiCustomerNumber:
      description: |
             Unique API Customer Number from *Parcel, Cargo and  Parcel International* service by considering below rules<br>
             <br>**For Non Agreement Converted customer:**  use the possible *"API customer number"*<br>Possible values:
             <br> - Main customer number<br> -CARGO-xxxxx<br> - PARCELS_NORWAY_INTERNATIONAL-xxxxx<br> - PARCELS_SWEDEN-xxxxx<br> - PARCELS_DENMARK-xxxxx<br> - PARCELS_FINLAND-xxxxx<br>
             <br>**For Agreement converted customer:** *"```ServiceType|Main Customer Number```"*<br>Possible values:
             <br> - CARGO|Main customer number<br> - PARCEL|Main customer number<br> - PARCELS_NORWAY_INTERNATIONAL-xxxxx<br> - PARCELS_SWEDEN-xxxxx<br> - PARCELS_DENMARK-xxxxx<br> - PARCELS_FINLAND-xxxxx<br>
      type: string
      required: true
    mediaTypeExtension:
      enum: [ .json ]
      description: Use .json to specify application/json
  get:
    description: Gives reports overview statistics
    responses:
      200:
        displayName: Successful response
        body:
          application/json:
            examples:
              successful:
                displayName: Successful
                description: The example below shows overview summary
                value: !include examples/overview_summary.json
              successfulNordics:
                displayName: Successful without cost details
                description: The example below shows overview summary for parcel internationals customers which don’t have economy details as of now.
                value: !include examples/overview_summary_without_cost.json

/dashboard/{apiCustomerNumber}/count:
  displayName: Provides count of shipments for key events
  description: |
    Gives count of shipment for key event for Parcel, Cargo and  Parcel International service customers with reports access.
  uriParameters:
    apiCustomerNumber:
      description: |
             Unique API Customer Number from *Parcel, Cargo and  Parcel International* service by considering below rules<br>
             <br>**For Non Agreement Converted customer:**  use the possible *"API customer number"*<br>Possible values:
             <br> - Main customer number<br> -CARGO-xxxxx<br> - PARCELS_NORWAY_INTERNATIONAL-xxxxx<br> - PARCELS_SWEDEN-xxxxx<br> - PARCELS_DENMARK-xxxxx<br> - PARCELS_FINLAND-xxxxx<br>
             <br>**For Agreement converted customer:** *"```ServiceType|Main Customer Number```"*<br>Possible values:
             <br> - CARGO|Main customer number<br> - PARCEL|Main customer number<br> - PARCELS_NORWAY_INTERNATIONAL-xxxxx<br> - PARCELS_SWEDEN-xxxxx<br> - PARCELS_DENMARK-xxxxx<br> - PARCELS_FINLAND-xxxxx<br>
      type: string
      required: true
  get:
    description: Provides count of shipments for key events
    headers:
      X-MyBring-API-Uid:
        description: Your Mybring login ID
      X-MyBring-API-Key:
        description: Your user's API key
      X-Bring-Client-URL:
        description: A URL that sort of identifies where you're using the APIs.
    queryParameters:
      requestedForDate:
        description: Date for which shipment count is required in format dd.mm.yyyy.
        required: true
        example: 24.03.2020
    responses:
      200:
        displayName: Successful response
        body:
          application/json:
            examples:
              successful:
                displayName: Successful
                description: The example below shows shipment count for key events
                value: !include examples/dashboard_count.json


/dashboard/{apiCustomerNumber}/dashboardRowData:
  displayName: Provides count of shipments with details for key events.
  description: |
    Gives count of shipment for key event with details for Parcel, Cargo and  Parcel International service customers with reports access.
  uriParameters:
    apiCustomerNumber:
      description: |
             Unique API Customer Number from *Parcel, Cargo and  Parcel International* service by considering below rules<br>
             <br>**For Non Agreement Converted customer:**  use the possible *"API customer number"*<br>Possible values:
             <br> - Main customer number<br> -CARGO-xxxxx<br> - PARCELS_NORWAY_INTERNATIONAL-xxxxx<br> - PARCELS_SWEDEN-xxxxx<br> - PARCELS_DENMARK-xxxxx<br> - PARCELS_FINLAND-xxxxx<br>
             <br>**For Agreement converted customer:** *"```ServiceType|Main Customer Number```"*<br>Possible values:
             <br> - CARGO|Main customer number<br> - PARCEL|Main customer number<br> - PARCELS_NORWAY_INTERNATIONAL-xxxxx<br> - PARCELS_SWEDEN-xxxxx<br> - PARCELS_DENMARK-xxxxx<br> - PARCELS_FINLAND-xxxxx<br>
      type: string
      required: true
  get:
    description: Provides shipment counts with details for key events.
    headers:
      X-MyBring-API-Uid:
        description: Your Mybring login ID
      X-MyBring-API-Key:
        description: Your user's API key
      X-Bring-Client-URL:
        description: A URL that sort of identifies where you're using the APIs.
    queryParameters:
      requestedForDate:
        description: Date for which shipment details is required in format dd.mm.yyyy.
        required: true
        example: 24.03.2020
    responses:
      200:
        displayName: Successful response
        body:
          application/json:
            type: DashboardData
            examples:
              successful:
                displayName: Successful
                description: The example below shows shipment count with details for the key events
                value: !include examples/dashboard_row_details.json
